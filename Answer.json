{
  "openapi": "3.0.2",
  "info": {
    "title": "Answer Service",
    "version": "0.1.0",
    "description": "Answers are responses to exercises. Some of them are correct, some of them not.\nThe Answer Service deals with everything that's necessary to keep track of \nanswers to exercises over time.\n\n# Introduction\n\nThe answers service handles some advanced processing of certain answers. Its main goal is to provide a unified and simple interface - abstracting away the complexities inherent in storing multiple different answers in multiple different formats.\n\n# Answer Types\n\nThe structure of answers depends on the exercise types they answer. The exercise \ntypes which form the basis for answer types can be seen below.\n\n<p align=\"center\">\n  <img alt=\"exercise types\" src=\"/spec-assets/exercise-types.svg\" />\n</p>\n\n# Authentication\n\nThis API supports OAuth2, and more specifically, the implicit flow.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "contact": {
      "name": "Developer @Sci-Code",
      "url": "https://sci-code.com",
      "email": "developer@sci-code.com"
    },
    "license": {
      "name": "Copyright Â© Sci-Code Inc. All Rights Reserved",
      "url": "https://sci-code.com"
    }
  },
  "tags": [
    {
      "name": "Answers",
      "description": "An answer to an exercise. Exercises can sometimes\ncombine together to form more advanced structures.\n\nE.g. Many codebase exercises combined in sequence \nform a project. Projects can be used \n(and useful) both for teaching and assessment.\n"
    }
  ],
  "paths": {
    "/answers": {
      "post": {
        "summary": "Create an Answer",
        "operationId": "submitAnswer",
        "description": "Creates an Answer object. Usually done in response to submitting an answer to an exercise.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AnswerDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful submit of an answer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400_bad_request"
          }
        },
        "tags": [
          "Answers"
        ]
      },
      "get": {
        "summary": "List Answers",
        "operationId": "listAnswers",
        "description": "Retrieves a list of the answers you have access to through your account. If no query paramaters are provided, it will return every single answer you have access to.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "maximum": 100,
              "minimum": 1
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."
          },
          {
            "name": "exerciseIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The specific exercises you want to retrieve answers for. This will limit answers to only those posted to those exercises."
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "evaluated",
            "description": "Filter answers based on being evaluated or not."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerListDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400_bad_request"
          },
          "401": {
            "$ref": "#/components/responses/401_unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404_not_found"
          }
        },
        "tags": [
          "Answers"
        ]
      }
    },
    "/answers/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "A unique identifier for a spefcific answer.",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an Answer",
        "operationId": "retrieveAnswer",
        "description": "Retrieves the details of an existing `Answer`. Simply supply a unique answer ID, and you'll get the corresponding answer information in return.",
        "security": [
          {
            "OAuth2": [
              "read:answers"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of an answer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400_bad_request"
          },
          "401": {
            "$ref": "#/components/responses/401_unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404_not_found"
          }
        },
        "tags": [
          "Answers"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AnswerDTO": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/FreeFormAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/MultipleChoiceAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/FillInTheBlankAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/CommandLineAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/CodeSnippetAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/CodebaseAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/DatabaseAnswerDTO"
          },
          {
            "$ref": "#/components/schemas/CodeReviewAnswerDTO"
          }
        ]
      },
      "FreeFormAnswerDTO": {
        "title": "Free Form Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreeFormAnswer"
          }
        ]
      },
      "MultipleChoiceAnswerDTO": {
        "title": "Multiple Choice Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/MultipleChoiceAnswer"
          }
        ]
      },
      "FillInTheBlankAnswerDTO": {
        "title": "Fill In The Blank Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/FillInTheBlankAnswer"
          }
        ]
      },
      "CommandLineAnswerDTO": {
        "title": "Command Line Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommandLineAnswer"
          }
        ]
      },
      "CodeSnippetAnswerDTO": {
        "title": "Code Snippet Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodeSnippetAnswer"
          }
        ]
      },
      "CodebaseAnswerDTO": {
        "title": "Codebase Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodebaseAnswer"
          }
        ]
      },
      "DatabaseAnswerDTO": {
        "title": "Database Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatabaseAnswer"
          }
        ]
      },
      "CodeReviewAnswerDTO": {
        "title": "Code Review Answer",
        "allOf": [
          {
            "$ref": "#/components/schemas/CodeReviewAnswer"
          }
        ]
      },
      "AnswerListDTO": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/FreeFormAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/MultipleChoiceAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/FillInTheBlankAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/CommandLineAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/CodeSnippetAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/CodebaseAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/DatabaseAnswerDTO"
            },
            {
              "$ref": "#/components/schemas/CodeReviewAnswerDTO"
            }
          ]
        }
      },
      "id": {
        "description": "Unique identifier for the object.",
        "type": "string",
        "example": "_ZZrEOIjc2kK3159uVMqxdw"
      },
      "userId": {
        "description": "Unique identifier for a user.",
        "type": "string",
        "example": "auth0|5e34cd09afb6530e2a739a9f"
      },
      "timestamp": {
        "description": "Date and Time at which the object was created. Measured in milliseconds since the Unix epoch.",
        "type": "integer",
        "example": 1581554917050,
        "minimum": 0
      },
      "ExerciseTypes": {
        "title": "type",
        "description": "Different kinds of exercises.",
        "type": "string",
        "enum": [
          "free_form",
          "multiple_choice",
          "fill_in_the_blank",
          "command_line",
          "code_snippet",
          "codebase",
          "database",
          "code_review"
        ]
      },
      "AnswerTypes": {
        "title": "answer type",
        "description": "The shape of an answer is based on the type of exercise (and, potentially at some point, a choice of expression selected by the user).",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExerciseTypes"
          }
        ]
      },
      "Answer": {
        "title": "Answer",
        "description": "An answer provides a potential solution produced in response to interpreting \nan exercise. In other words, it's a response that attempts to answer the \nproblem stated in the exercise description.\n",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/userId"
              }
            ]
          },
          "exerciseId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "created": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/timestamp"
              }
            ]
          },
          "status": {
            "title": "status",
            "description": "Correction/validation stage, going by whether the answer has been.",
            "items": {
              "type": "string",
              "enum": [
                "Automatically Corrected",
                "Manually & Automatically Corrected",
                "Manually Corrected",
                "Needs Correction"
              ]
            },
            "type": "string",
            "example": "Needs Correction"
          },
          "type": {
            "$ref": "#/components/schemas/AnswerTypes"
          }
        },
        "required": [
          "created",
          "id",
          "status",
          "type"
        ]
      },
      "FreeFormAnswer": {
        "title": "Free Form Answer",
        "description": "... constituting an answer to a `Free Form Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "MultipleChoiceAnswer": {
        "title": "Multiple Choice Answer",
        "description": "... constituting an answer to a `Multiple Choice Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "FillInTheBlankAnswer": {
        "title": "Fill In The Blank Answer",
        "description": "... constituting an answer to a `Fill In The Blank Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "CommandLineAnswer": {
        "title": "Command Line Answer",
        "description": "... constituting an answer to a `Command Line Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "CodeSnippetAnswer": {
        "title": "Code Snippet Answer",
        "description": "... constituting an answer to a `Code Snippet Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "CodebaseAnswer": {
        "title": "Codebase Answer",
        "description": "Files and folders (filesystem) constituting an answer to a `Codebase Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object",
            "properties": {
              "archive": {
                "type": "string",
                "description": "The answer in the form of an archived file system.",
                "format": "binary",
                "example": "codebase.zip"
              },
              "archiveFormat": {
                "description": "The type of archive. Currently only supporting zip files.",
                "type": "string",
                "enum": [
                  "zip"
                ],
                "example": "zip"
              }
            },
            "required": [
              "archive",
              "archiveFormat"
            ]
          }
        ],
        "x-examples": {
          "example-1": {
            "id": "_ZZrEOIjc2kK3159uVMqxdw",
            "creator": "auth0|5e34cd09afb6530e2a739a9f",
            "exerciseId": "_ZZrEOIjc2kK3159uVMqxdw",
            "created": 1581554917050,
            "status": "Needs Correction",
            "type": "free_form",
            "archive": "codebase.zip",
            "archiveFormat": "zip"
          }
        }
      },
      "DatabaseAnswer": {
        "title": "Database Answer",
        "description": "... constituting an answer to a `Database Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      },
      "CodeReviewAnswer": {
        "title": "Code Review Answer",
        "description": "... constituting an answer to a `Code Review Exercise`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Answer"
          },
          {
            "type": "object"
          }
        ]
      }
    },
    "responses": {
      "400_bad_request": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "There seems to be something wrong with your request."
                }
              }
            }
          }
        }
      },
      "401_unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like you aren't authenticated. Please authenticate yoruself, then try again."
                }
              }
            }
          }
        }
      },
      "404_not_found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like the resource you requested doesn't exist."
                }
              }
            }
          }
        }
      },
      "bad_request_400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "There seems to be something wrong with your request."
                }
              }
            }
          }
        }
      },
      "unauthorized_401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like you aren't authenticated. Please authenticate yoruself, then try again."
                }
              }
            }
          }
        }
      },
      "not_found_404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like the resource you requested doesn't exist."
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "diggit.eu.auth0.com",
            "scopes": {
              "read:answers": "read answers"
            }
          }
        }
      }
    }
  }
}