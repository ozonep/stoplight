{
  "openapi": "3.0.2",
  "info": {
    "title": "Report Generator Service",
    "version": "0.1.0",
    "description": "The Report Generator service deals with generating reports\nbased on data collected about e.g. challenges. This allows\nus to get the data in the format we want from making a single API call\nwithout exposing all the data collected and advanced processing on the \nclient side.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "contact": {
      "name": "Developer @Sci-Code",
      "url": "https://sci-code.com",
      "email": "developer@sci-code.com"
    },
    "license": {
      "name": "Copyright © Sci-Code Inc. All Rights Reserved",
      "url": "https://sci-code.com"
    }
  },
  "tags": [
    {
      "name": "Challenge Report",
      "description": "The ```Challenge Report``` provides the data required to put together \na report on the challenge, ideally with filters and different iformation\nfor different user types.\n"
    }
  ],
  "paths": {
    "/challenge_report": {
      "get": {
        "summary": "Retrieve a Challenge Report",
        "operationId": "retrieveChallengeReport",
        "description": "Returns the ```Challenge Report``` object",
        "security": [
          {
            "OAuth2": [
              "read:challenge_reports"
            ]
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "description": "A unique identifier for the user.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "challengeId",
            "description": "A unique identifier for the challenge.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "user_type",
            "description": "The type of user, which determines which data is needed in their report.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "it_recruiter",
                "it_job_seeker",
                "it_organization"
              ]
            }
          }
        ],
        "tags": [
          "Challenge Report"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeReportDTO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400_bad_request"
          },
          "401": {
            "$ref": "#/components/responses/401_unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404_not_found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChallengeReportDTO": {
        "title": "Challenge Report",
        "description": "a filtered set of data points required to present a challenge report.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Report"
          },
          {
            "type": "object",
            "properties": {
              "challenge_id": {
                "$ref": "#/components/schemas/id"
              },
              "total_score": {
                "description": "The total score achieved by the user for the given challenge.",
                "type": "integer"
              },
              "total_time": {
                "description": "The total time in seconds spent by the user for the given challenge.",
                "type": "integer",
                "minimum": 0
              },
              "challenge_info": {
                "$ref": "#/components/schemas/ChallengeDescription"
              },
              "final_answer": {
                "description": "A reference to the final answer provided by the user to the given challenge.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Answer"
                  }
                ]
              },
              "best_final_answer": {
                "description": "The best answer in terms of overall quality, structure and simplicity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Answer"
                  }
                ]
              },
              "exercise_results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "exercise_id": {
                      "$ref": "#/components/schemas/id"
                    },
                    "answer_id": {
                      "$ref": "#/components/schemas/id"
                    },
                    "exercise_score": {
                      "description": "The score obtained by the user for the given exercise, as part of the challenge.",
                      "type": "number"
                    },
                    "exercise_time": {
                      "description": "The time (in seconds) spent by the user for the given exercise.",
                      "type": "number",
                      "minimum": 0
                    },
                    "top_20_score": {
                      "description": "The median score obtained by the top 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "bottom_20_score": {
                      "description": "The median score obtained by the bottom 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "top_20_time": {
                      "description": "The median time (in seconds) obtained by the top 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "bottom_20_time": {
                      "description": "The median time (in seconds) obtained by the bottom 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "userId": {
        "description": "Unique identifier for a user.",
        "type": "string",
        "example": "auth0|5e34cd09afb6530e2a739a9f"
      },
      "Report": {
        "title": "Course",
        "description": "a filtered set of data points required to present a report. for the purpose of teaching something.",
        "type": "object",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/userId"
          }
        },
        "required": [
          "id"
        ]
      },
      "id": {
        "description": "Unique identifier for the object.",
        "type": "string",
        "example": "_ZZrEOIjc2kK3159uVMqxdw"
      },
      "object": {
        "description": "String representing the object’s type. Objects of the same type share the same value.",
        "type": "string"
      },
      "timestamp": {
        "description": "Date and Time at which the object was created. Measured in milliseconds since the Unix epoch.",
        "type": "integer",
        "example": 1581554917050,
        "minimum": 0
      },
      "url": {
        "description": "A universal resource identifier (URI), according to the [RFC3986](https://tools.ietf.org/html/rfc3986) standard.",
        "type": "string",
        "format": "uri",
        "example": "https://example.com/some/path"
      },
      "fileUpload": {
        "type": "string",
        "format": "binary"
      },
      "language": {
        "description": "A three-letter ISO code ([ISO 639-3](https://en.wikipedia.org/wiki/ISO_639-3)), representing the language.",
        "type": "string",
        "minLength": 3,
        "maxLength": 3,
        "example": "eng"
      },
      "OrganizationType": {
        "title": "type",
        "description": "The type of organization. Currently supports only a subset of [Norwegian organization types](https://www.brreg.no/bedrift/organisasjonsformer/). All values are prefixed with a two-letter ISO code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), representing the country, and an underscore for separation.",
        "type": "string",
        "enum": [
          "NO_ANS",
          "NO_AS",
          "NO_SÆR"
        ],
        "example": "NO_AS"
      },
      "OrganizationCulture": {
        "description": "A model of the organization culture.",
        "properties": {
          "principles": {
            "description": "Fundamental propositions that serve as the foundations for behavior (1-3 sentences).",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "Great cultures bring problems and disagreements to the surface and solve them well, and they love imagining and building great things that haven’t been built before."
            ]
          },
          "values": {
            "description": "Fundamental qualities we consider important (1-3 words).",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "sustainability"
            ]
          }
        }
      },
      "File": {
        "title": "File",
        "type": "object",
        "description": "An object with information about a file.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "created": {
            "$ref": "#/components/schemas/timestamp"
          },
          "title": {
            "description": "A user friendly title for the file.",
            "maxLength": 280,
            "nullable": true,
            "type": "string"
          },
          "filename": {
            "description": "A filename for the file, suitable for saving to a filesystem.",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "enum": [
              "file"
            ],
            "type": "string",
            "example": "file"
          },
          "size": {
            "description": "The size in bytes of the file object.",
            "type": "integer"
          },
          "fileFormat": {
            "title": "fileFormat",
            "description": "The specific information encoding method used.",
            "enum": [
              "jpg",
              "png"
            ],
            "nullable": true,
            "type": "string"
          },
          "url": {
            "description": "The URL from which the file can be downloaded using your live secret API key.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "created",
          "type",
          "url",
          "size"
        ]
      },
      "OrganizationBranding": {
        "description": "The branding associated with the organization.",
        "properties": {
          "icon": {
            "description": "An icon for the organization. Must be square and at least 128px x 128px.",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              },
              {
                "nullable": true
              }
            ]
          },
          "logo": {
            "description": "A logo for the organization that will be used in on pages. Must be at least 128px x 128px.",
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              },
              {
                "nullable": true
              }
            ]
          },
          "primary_color": {
            "description": "A CSS hex color value representing the primary branding color for this organization.",
            "nullable": true,
            "type": "string"
          }
        }
      },
      "MinimalUser": {
        "description": "A minimal representation of a user.",
        "type": "object",
        "properties": {
          "user_id": {
            "description": "ID of the user which can be used when interacting with other APIs.",
            "type": "string"
          },
          "picture": {
            "description": "URL to picture, photo, or avatar of this user.",
            "type": "string"
          },
          "given_name": {
            "description": "Given name/first name/forename of this user.",
            "type": "string"
          },
          "family_name": {
            "description": "Family name/last name/surname of this user.",
            "type": "string"
          }
        },
        "required": [
          "family_name",
          "given_name",
          "picture",
          "user_id"
        ]
      },
      "Organization": {
        "title": "Organization",
        "description": "An organized group of people with a particular purpose, such as a business, government agency, non-profit, etc.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "name": {
            "description": "The name of the orgnization, taken from the public registry.",
            "type": "string",
            "readOnly": true,
            "example": "SCI-CODE AS"
          },
          "slogan": {
            "description": "A a brief phrase that is closely allied with a company name or brand.",
            "type": "string",
            "maximum": 60,
            "nullable": true,
            "example": "closing the gap between industry and education"
          },
          "vision_statement": {
            "description": "A descriptive text of what future the organization aims to bring about.",
            "type": "string",
            "nullable": true,
            "example": "Sci-Code, as a company, is actively developing services, tools and technologies that contributes towards closing the gap between industry and education. The motivation and value upon which the Company has been built is usefulness. The key of any country’s societal development is based on Education. It is how a generation of people pass its knowledge, know-how and values to the next one. This is why we're building a new educational system, pillared on the advances in technology that will enable exploratory learning, personalized learning experiences tailored to each individual, and the most  stimulating education in the world; verified by our algorithms. This system will serve as an alternative to the current education system, allowing for a seamless and gradual, piece-by-piece transition. And through building this new system, we allow for the change of our current societal dogma of school and learning being perceived as necessarily boring and hard, into school and learning being AWESOME."
          },
          "org_number": {
            "description": "An organization number, issued by the government; proving that the organization exists.",
            "type": "string",
            "example": 919213914
          },
          "org_type": {
            "$ref": "#/components/schemas/OrganizationType"
          },
          "culture": {
            "$ref": "#/components/schemas/OrganizationCulture"
          },
          "branding": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationBranding"
              }
            ]
          },
          "icon_file": {
            "description": "File upload. An icon for the organization. Must be square and at least 128px x 128px.",
            "writeOnly": true,
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/fileUpload"
              }
            ]
          },
          "logo_file": {
            "description": "File Upload. A logo for the organization that will be used in on pages. Must be at least 128px x 128px.",
            "writeOnly": true,
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/fileUpload"
              }
            ]
          },
          "primary_color": {
            "description": "A CSS hex color value representing the primary branding color for this organization.",
            "writeOnly": true,
            "nullable": true,
            "type": "string"
          },
          "links": {
            "description": "Links to relevant external pages with information about the organization.",
            "properties": {
              "website": {
                "description": "The official website of the organization.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              },
              "github": {
                "description": "A link to the organization's github page.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              },
              "stackshare": {
                "description": "A link to the organization's stackshare page.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              },
              "linkedin": {
                "description": "A link to the organization's linkedIn page.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              },
              "facebook": {
                "description": "A link to the organization's facebook page.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              },
              "twitter": {
                "description": "A link to the organization's twitter page.",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/url"
                  }
                ]
              }
            }
          },
          "members": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimalUser"
            }
          },
          "membersList": {
            "description": "A list of user ids representing the members currently associated with the organization.",
            "type": "array",
            "writeOnly": true,
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/userId"
            }
          }
        },
        "required": [
          "name",
          "org_number"
        ]
      },
      "ChallengeDescription": {
        "title": "Challenge Description",
        "description": "A description of the challenge. It should answer all questions necessary for a challenge taker to reach a decision.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "object": {
            "title": "value is \"challenge\"",
            "example": "challenge",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/object"
              }
            ]
          },
          "created": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/timestamp"
              }
            ]
          },
          "creator": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/userId"
              }
            ]
          },
          "title": {
            "description": "A short text describing the challenge.",
            "type": "string",
            "example": "Build your first Form Component"
          },
          "tagline": {
            "description": "A short add-on text, adding more details to the title.",
            "type": "string",
            "example": "Show your skills in React by building a simple form component"
          },
          "category": {
            "description": "A more structured way to categorize challenges.",
            "type": "string",
            "enum": [
              "front-end",
              "back-end",
              "full-stack"
            ]
          },
          "tags": {
            "description": "A set of keywords related to the challenge.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "example": [
              "react.js",
              "redux.js"
            ]
          },
          "additional_info": {
            "description": "An ordered list of additional sections describing the challenge.",
            "type": "array",
            "nullable": true,
            "items": {
              "title": "Challenge Description Section",
              "type": "object",
              "properties": {
                "headline": {
                  "description": "The headline of the section.",
                  "type": "string"
                },
                "bodycopy": {
                  "description": "Approximately a paragraph of text describing the section.",
                  "type": "string"
                },
                "label": {
                  "description": "A piece of text describing the section.",
                  "type": "string"
                },
                "featured_blob": {
                  "description": "A featured blob (image, etc.) for the section.",
                  "readOnly": true,
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/url"
                    }
                  ]
                },
                "featured_blob_file": {
                  "description": "A file containing the featured blob (image, etc.) for the section.",
                  "writeOnly": true,
                  "nullable": true,
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/fileUpload"
                    }
                  ]
                }
              }
            }
          },
          "promo_image": {
            "description": "A visual description of the challenge.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/url"
              }
            ]
          },
          "promo_image_file": {
            "description": "A binary file object containing the visual description of the challenge.",
            "writeOnly": true,
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/fileUpload"
              }
            ]
          },
          "promo_video": {
            "description": "An in-depth, stimulating descrpition of the challenge.",
            "readOnly": true,
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/url"
              }
            ]
          },
          "promo_video_file": {
            "description": "A binary file object containing an in-depth, stimulating descrpition of the challenge.",
            "writeOnly": true,
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/fileUpload"
              }
            ]
          },
          "availability_ranges": {
            "description": "The durations where people will be able to take the challenge.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "open_time": {
                  "description": "Date and Time when the challenge opens. Measured in seconds since the Unix epoch.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/timestamp"
                    }
                  ]
                },
                "close_time": {
                  "description": "Date and Time at which the challenge closes. Measured in seconds since the Unix epoch.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/timestamp"
                    }
                  ]
                }
              }
            }
          },
          "max_duration": {
            "description": "The maximum amount of time (in seconds) available to complete the challenge (after which the challenge will be automatically submitted).",
            "type": "number",
            "minimum": 1,
            "example": 172800
          },
          "minimum_level": {
            "description": "The minimum level suggested in order to be able to complete the challenge.",
            "title": "e.g. \"Junior Web Developer\"",
            "type": "string",
            "example": "Junior Web Developer",
            "default": "Junior Developer"
          },
          "langauge": {
            "default": "eng",
            "allOf": [
              {
                "$ref": "#/components/schemas/language"
              }
            ]
          },
          "organizers": {
            "description": "An array of organization objects, representing the organizations organizing the challenge.",
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "organizer_ids": {
            "description": "An array of organization IDs, referring to the organizations organizing the challenge.",
            "writeOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/id"
            }
          },
          "published": {
            "description": "If the challenge is published, it'll be listed in the public challenge catalog. If not, only the ones with the right link will be able to access it. This meets the need for recruiters to prevent solicitation of pre-vetted candidates.",
            "type": "boolean",
            "default": false,
            "example": true
          }
        },
        "required": [
          "title",
          "tagline"
        ]
      },
      "ExerciseTypes": {
        "title": "type",
        "description": "Different kinds of exercises.",
        "type": "string",
        "enum": [
          "free_form",
          "multiple_choice",
          "fill_in_the_blank",
          "command_line",
          "code_snippet",
          "codebase",
          "database",
          "code_review"
        ]
      },
      "AnswerTypes": {
        "title": "answer type",
        "description": "The shape of an answer is based on the type of exercise (and, potentially at some point, a choice of expression selected by the user).",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExerciseTypes"
          }
        ]
      },
      "Answer": {
        "title": "Answer",
        "description": "An answer provides a potential solution produced in response to interpreting \nan exercise. In other words, it's a response that attempts to answer the \nproblem stated in the exercise description.\n",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/userId"
              }
            ]
          },
          "exerciseId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/id"
              }
            ]
          },
          "created": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/timestamp"
              }
            ]
          },
          "status": {
            "title": "status",
            "description": "Correction/validation stage, going by whether the answer has been.",
            "items": {
              "type": "string",
              "enum": [
                "Automatically Corrected",
                "Manually & Automatically Corrected",
                "Manually Corrected",
                "Needs Correction"
              ]
            },
            "type": "string",
            "example": "Needs Correction"
          },
          "type": {
            "$ref": "#/components/schemas/AnswerTypes"
          }
        },
        "required": [
          "created",
          "id",
          "status",
          "type"
        ]
      },
      "ChallengeReport": {
        "title": "Challenge Report",
        "description": "a filtered set of data points required to present a challenge report.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Report"
          },
          {
            "type": "object",
            "properties": {
              "challenge_id": {
                "$ref": "#/components/schemas/id"
              },
              "total_score": {
                "description": "The total score achieved by the user for the given challenge.",
                "type": "integer"
              },
              "total_time": {
                "description": "The total time in seconds spent by the user for the given challenge.",
                "type": "integer",
                "minimum": 0
              },
              "challenge_info": {
                "$ref": "#/components/schemas/ChallengeDescription"
              },
              "final_answer": {
                "description": "A reference to the final answer provided by the user to the given challenge.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Answer"
                  }
                ]
              },
              "best_final_answer": {
                "description": "The best answer in terms of overall quality, structure and simplicity.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Answer"
                  }
                ]
              },
              "exercise_results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "exercise_id": {
                      "$ref": "#/components/schemas/id"
                    },
                    "answer_id": {
                      "$ref": "#/components/schemas/id"
                    },
                    "exercise_score": {
                      "description": "The score obtained by the user for the given exercise, as part of the challenge.",
                      "type": "number"
                    },
                    "exercise_time": {
                      "description": "The time (in seconds) spent by the user for the given exercise.",
                      "type": "number",
                      "minimum": 0
                    },
                    "top_20_score": {
                      "description": "The median score obtained by the top 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "bottom_20_score": {
                      "description": "The median score obtained by the bottom 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "top_20_time": {
                      "description": "The median time (in seconds) obtained by the top 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    },
                    "bottom_20_time": {
                      "description": "The median time (in seconds) obtained by the bottom 20% of challenge takers for the given exercise.",
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "responses": {
      "400_bad_request": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "There seems to be something wrong with your request."
                }
              }
            }
          }
        }
      },
      "401_unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like you aren't authenticated. Please authenticate yoruself, then try again."
                }
              }
            }
          }
        }
      },
      "404_not_found": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like the resource you requested doesn't exist."
                }
              }
            }
          }
        }
      },
      "bad_request_400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "There seems to be something wrong with your request."
                }
              }
            }
          }
        }
      },
      "unauthorized_401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like you aren't authenticated. Please authenticate yoruself, then try again."
                }
              }
            }
          }
        }
      },
      "not_found_404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Seems like the resource you requested doesn't exist."
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "diggit.eu.auth0.com",
            "scopes": {
              "read:challenge_reports": "retrieve challenge reports"
            }
          }
        }
      }
    }
  }
}